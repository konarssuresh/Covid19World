{"version":3,"sources":["Containers/Dashboard/Dashboard.module.css","Containers/CountryStats/CountryStats.module.css","logo.svg","assets/images/covid-icon.ico","Components/Navbar/Navbar.js","store/actions/Dashboard.js","store/actions/action_types.js","utility.js","Containers/Dashboard/Dashboard.js","hoc/Auxilary.js","Containers/CountryStats/CountryStats.js","store/actions/CountryStats.js","Components/Footer/Footer.js","App.js","serviceWorker.js","store/reducers/Dashboard.js","store/reducers/CountryStats.js","index.js"],"names":["module","exports","withRouter","props","className","to","style","fontFamily","href","src","require","width","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","fetchDashboardSuccess","fetchedData","data","formatNumber","number","Intl","NumberFormat","maximumSignificantDigits","format","formatDate","date","DateTimeFormat","year","month","day","timeZone","hour","minute","second","timeZoneName","Date","Dashboard","this","onFetchInit","dashboardData","loading","classes","SpanTitle","confirmed","recovered","deaths","new_confirmed","new_recovered","new_deaths","updatedAt","Component","connect","state","dboard","updatedDate","dispatch","a","fetch","response","json","result","resultObj","console","log","updated_at","error","aux","children","CountryStats","filterText","selectedCountry","showModal","onFilterTextChangeHandler","event","setState","target","value","handleModalClose","onCountryClicked","key","country","countries","find","code","onFetchStats","modal","countriesArray","length","filteredCountriesArray","filter","name","toLowerCase","search","sort","left","right","latest_data","map","onClick","calculated","death_rate","toFixed","recovery_rate","Modal","show","onHide","ModalHeader","ModalTitle","ModalBody","ModalStatsParam","ModalStatsVal","population","critical","cases_per_million_population","ModalFooter","onChange","placeholder","scope","stats","footer","App","Navbar","path","component","from","Footer","Boolean","window","location","hostname","match","initialState","reducer","action","composeEnhancers","fetchIntercept","register","request","url","config","method","headers","requestError","Promise","reject","responseError","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","combineReducers","DashboardReducer","CountryStatsReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","basename","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.625ab395.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dashboard\":\"Dashboard_Dashboard__pqw21\",\"SpanTitle\":\"Dashboard_SpanTitle__2D03M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"CountryStats_Modal__G_aLy\",\"ModalStatsParam\":\"CountryStats_ModalStatsParam__2RIZG\",\"ModalStatsVal\":\"CountryStats_ModalStatsVal__2BG-h\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/covid-icon.c5af19dd.ico\";","import React from 'react';\r\nimport {NavLink,withRouter} from 'react-router-dom';\r\n\r\n\r\nconst navbar = props =>(\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n\r\n  <NavLink to=\"/\" className=\"navbar-brand\" style={{fontFamily:\"'Monoton', cursive\"}}  href=\"#\">\r\n      <img src={require(\"../../assets/images/covid-icon.ico\")} style={{width:'30px',height:'30px'}} alt=\"\"/> Covid19World</NavLink>\r\n  <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span className=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul className=\"navbar-nav mr-auto\">\r\n      <li className=\"nav-item active\">\r\n        <NavLink className=\"nav-link\" to=\"/stats\">Country Stats</NavLink>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</nav>\r\n);\r\n\r\n\r\nexport default withRouter(navbar);","import * as actionTypes from './action_types';\r\n\r\nexport const fetchDashboardSuccess=(fetchedData)=>{\r\n    return {\r\n        type:actionTypes.FETCH_DASHBOARD_SUCCESS,\r\n        data:fetchedData\r\n    }\r\n}\r\n\r\nexport const fetchDashboardFail = (error)=>{\r\n    return {\r\n        type:actionTypes.FETCH_DASHBOARD_FAIL,\r\n        error:error\r\n    }\r\n}\r\n\r\nexport const fetchDashboardInit= ()=>{\r\n    return async(dispatch)=>{\r\n        try{\r\n            const response=await fetch(\"https://corona-api.com/timeline\");\r\n            const result=await response.json();\r\n            const resultObj=result.data[0];\r\n            console.log(resultObj);\r\n            const fetchedData={\r\n                updatedAt:resultObj.updated_at,\r\n                updatedDate:resultObj.date,\r\n                deaths:resultObj.deaths,\r\n                confirmed:resultObj.confirmed,\r\n                recovered:resultObj.recovered,\r\n                new_confirmed:resultObj.new_confirmed,\r\n                new_recovered:resultObj.new_recovered,\r\n                new_deaths:resultObj.new_deaths\r\n            }\r\n            dispatch(fetchDashboardSuccess(fetchedData));\r\n            //build the object and dispatch action\r\n        }catch(error){\r\n            dispatch(fetchDashboardFail(error));\r\n        }\r\n    }\r\n}","export const DASHBOARD_INIT=\"DASHBOARD_INIT\";\r\nexport const FETCH_DASHBOARD_SUCCESS=\"FETCH_DASHBOARD_SUCCESS\";\r\nexport const FETCH_DASHBOARD_FAIL=\"FETCH_DASHBOARD_FAIL\";\r\n\r\nexport const STATS_INIT=\"STATS_INIT\";\r\nexport const FETCH_STATS_SUCCESS=\"FETCH_STATS_SUCCESS\";\r\nexport const FETCH_STATS_FAIL=\"FETCH_STATS_FAIL\";","export const formatNumber=(number)=>{\r\n    return new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(number)\r\n}\r\n\r\nexport const formatDate=(date)=>{\r\n    return new Intl.DateTimeFormat(\"en-IN\", {\r\n        year: \"numeric\",\r\n        month: \"long\",\r\n        day: \"2-digit\",\r\n        timeZone: \"Asia/Kolkata\",\r\n        hour: 'numeric', minute: 'numeric', second: 'numeric',\r\n        timeZoneName:'short'\r\n\r\n      }).format(new Date(date));\r\n}","import React,{Component} from 'react';\r\nimport {fetchDashboardInit} from \"../../store/actions/index\";\r\nimport {connect} from 'react-redux';\r\nimport classes from './Dashboard.module.css';\r\nimport {formatNumber,formatDate} from '../../utility';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nclass Dashboard extends Component{\r\n    componentDidMount(){\r\n       this.props.onFetchInit();\r\n    }\r\n    render(){\r\n        let dashboardData=null;\r\n        if(!this.props.loading){\r\n            dashboardData=(<div className=\"container\">\r\n                <div className={ classes.Dashboard+\" jumbotron\"}>\r\n                    <h3>Global Covid19 Stats</h3>\r\n                    <h4><span className={classes.SpanTitle}>Confirmed:</span> <span className=\"text-primary\">{formatNumber(this.props.confirmed)}</span></h4>\r\n                    <h4><span className={classes.SpanTitle}>Recovered:</span> <span className=\"text-success\">{formatNumber(this.props.recovered)}</span></h4>\r\n                    <h4><span className={classes.SpanTitle}>Deaths:</span> <span className=\"text-danger\">{formatNumber(this.props.deaths)}</span></h4>\r\n                    <h3>Last 24 hours</h3>\r\n                    <h4><span className={classes.SpanTitle}>Confirmed:</span> <span className=\"text-primary\">{formatNumber(this.props.new_confirmed)}</span></h4>\r\n                    <h4><span className={classes.SpanTitle}>Recovered:</span> <span className=\"text-success\">{formatNumber(this.props.new_recovered)}</span></h4>\r\n                    <h4><span className={classes.SpanTitle}>Deaths:</span> <span className=\"text-danger\">{formatNumber(this.props.new_deaths)}</span></h4>\r\n                    <NavLink to=\"/stats\" className=\"btn btn-primary btn-lg\">Countrywise Details</NavLink>\r\n                    <hr/>\r\n                    <p className=\"text-primary\">Last updated on {formatDate(this.props.updatedAt)}</p>\r\n                </div>\r\n            </div>)\r\n        } \r\n\r\n        return  (<div className={classes.Dashboard}>\r\n                    {dashboardData}\r\n                </div>)\r\n    }\r\n    \r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n        onFetchInit:()=>dispatch(fetchDashboardInit())\r\n    }\r\n}\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        updatedAt:state.dboard.updatedAt,\r\n        updatedDate:state.dboard.updatedDate,\r\n        deaths:state.dboard.deaths,\r\n        confirmed:state.dboard.confirmed,\r\n        recovered:state.dboard.recovered,\r\n        new_confirmed:state.dboard.new_confirmed,\r\n        new_recovered:state.dboard.new_recovered,\r\n        new_deaths:state.dboard.new_deaths,\r\n        loading:state.dboard.loading\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Dashboard)","const aux=(props)=>props.children\r\n\r\nexport default aux","import React,{Component} from 'react';\r\nimport classes from \"./CountryStats.module.css\";\r\nimport {fetchStatsInit} from \"../../store/actions/index\";\r\nimport {connect} from \"react-redux\";\r\nimport {formatNumber,formatDate}  from \"../../utility\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport ModalBody from \"react-bootstrap/ModalBody\";\r\nimport ModalHeader from \"react-bootstrap/ModalHeader\";\r\nimport ModalFooter from \"react-bootstrap/ModalFooter\";\r\nimport ModalTitle from \"react-bootstrap/ModalTitle\";\r\nimport Aux from \"../../hoc/Auxilary\";\r\n\r\nclass CountryStats extends Component{\r\n\r\n    state={\r\n        filterText:'',\r\n        selectedCountry:null,\r\n        showModal:false\r\n    }\r\n\r\n    onFilterTextChangeHandler=(event)=>{\r\n        this.setState({filterText:event.target.value});\r\n    }\r\n\r\n    handleModalClose=()=>{\r\n        this.setState({selectedCountry:null})\r\n    }\r\n\r\n    onCountryClicked=(key)=>{\r\n        const country= this.props.countries.find((country)=>{\r\n            return country.code === key\r\n        })\r\n        if(country){\r\n            console.log(\"country found\");\r\n            this.setState({selectedCountry:country})\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.onFetchStats();\r\n    }\r\n\r\n    render(){\r\n        let countries=null;\r\n        let modal=null;\r\n        //build page data\r\n        if(!this.props.loading){\r\n            let countriesArray=this.props.countries;\r\n            if(countriesArray&& countriesArray.length>0){\r\n                //filter array based on text input\r\n                let filteredCountriesArray=countriesArray.filter((country)=>{\r\n                    return !country.name.toLowerCase().search(this.state.filterText.toLowerCase());\r\n                });\r\n                //sort the countries based on active cases in descending order in the filtered array\r\n                filteredCountriesArray.sort((left,right)=>{\r\n                    if((left.latest_data.confirmed)<(right.latest_data.confirmed)){\r\n                        return 1\r\n                    }\r\n                    if((left.latest_data.confirmed)>(right.latest_data.confirmed)){\r\n                        return -1\r\n                    }\r\n                })\r\n                // build the jsx for sorted array\r\n                countries=filteredCountriesArray.map(country=>{\r\n                    return (\r\n                        <tr key={country.code} onClick={()=>this.onCountryClicked(country.code)}>\r\n                            <td>{country.name}</td>\r\n                            <td className=\"text-primary\">{formatNumber(country.latest_data.confirmed)}</td>\r\n                            <td className=\"text-warning d-none d-lg-table-cell\">{formatNumber(country.latest_data.confirmed-country.latest_data.recovered)}</td>\r\n                            <td className=\"text-success d-none d-lg-table-cell\">{formatNumber(country.latest_data.recovered)}</td>\r\n                            <td className=\"text-danger\">{formatNumber(country.latest_data.deaths)}</td>\r\n                            <td className=\"text-danger d-none d-lg-table-cell\">{country.latest_data.calculated.death_rate?country.latest_data.calculated.death_rate.toFixed(2):0}</td>\r\n                            <td className=\"text-success d-none d-lg-table-cell\">{country.latest_data.calculated.recovery_rate?country.latest_data.calculated.recovery_rate.toFixed(2):0}</td>\r\n                        </tr>\r\n                    )\r\n                })\r\n            }\r\n        }\r\n        //build modal data\r\n        if(this.state.selectedCountry){\r\n            modal=(                \r\n            <Modal show={this.state.selectedCountry!==null} onHide={this.handleModalClose}>\r\n                <ModalHeader>\r\n                    <ModalTitle>\r\n                        <div className=\"container text-center\">\r\n                            <h2 className=\"text-primary\">{this.state.selectedCountry.name}</h2>\r\n                        </div>\r\n                    </ModalTitle>\r\n                </ModalHeader>\r\n                <ModalBody>\r\n                    <div className={classes.Modal+\" container\"}>\r\n                        <h3><span className={classes.ModalStatsParam}>Population -</span>  <span className={classes.ModalStatsVal+ \" text-primary\"}>{formatNumber(this.state.selectedCountry.population)}</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Total Confirmed -</span> <span className={classes.ModalStatsVal+ \" text-primary\"}>{formatNumber(this.state.selectedCountry.latest_data.confirmed)}</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Total Active -</span> <span className={classes.ModalStatsVal+\" text-warning\"}>{formatNumber(this.state.selectedCountry.latest_data.confirmed-this.state.selectedCountry.latest_data.recovered)}</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Total Recovered -</span> <span className={classes.ModalStatsVal+\" text-success\"}>{formatNumber(this.state.selectedCountry.latest_data.recovered)}</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Total Critial -</span> <span className={classes.ModalStatsVal+\" text-danger\"}>{formatNumber(this.state.selectedCountry.latest_data.critical)}</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Total Deaths -</span> <span className={classes.ModalStatsVal+\" text-danger\"}>{formatNumber(this.state.selectedCountry.latest_data.deaths)}</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Death Rate -</span> <span className={classes.ModalStatsVal+\" text-danger\"}>{this.state.selectedCountry.latest_data.calculated.death_rate?this.state.selectedCountry.latest_data.calculated.death_rate.toFixed(2):0}%</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Recovery Rate-</span> <span className={classes.ModalStatsVal+\" text-success\"}>{this.state.selectedCountry.latest_data.calculated.recovery_rate?this.state.selectedCountry.latest_data.calculated.recovery_rate.toFixed(2):0}%</span></h3>\r\n                        <h3><span className={classes.ModalStatsParam}>Cases per Million Population- </span> <span className={classes.ModalStatsVal+\" text-primary\"}>{this.state.selectedCountry.latest_data.calculated.cases_per_million_population}</span></h3>\r\n                        <span className=\"text-primary\">last updated at -{formatDate(this.state.selectedCountry.updated_at)}</span> \r\n                    </div>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <div>\r\n                        <button className=\"btn btn-primary\" onClick={this.handleModalClose}>Close</button>\r\n                    </div>\r\n                </ModalFooter>\r\n            </Modal>)\r\n        }\r\n        return (\r\n            <Aux>\r\n                <div className=\"container\">\r\n                    <p>Filter:- <input onChange={this.onFilterTextChangeHandler} className=\"form-control\" placeholder=\"Region Name\"/></p>\r\n                    <p className=\"text-primary\">Click in countries for detailed info</p>\r\n                    <div className=\"table-responsive\">\r\n                        <table className=\"table\">\r\n                            <thead className=\"thead-dark\">\r\n                                <tr>\r\n                                    <th scope=\"col\">Country</th>\r\n                                    <th scope=\"col\">Conf</th>\r\n                                    <th scope=\"col\" className=\"d-none d-lg-table-cell\">Act</th>\r\n                                    <th scope=\"col\" className=\"d-none d-lg-table-cell\">Disch</th>\r\n                                    <th scope=\"col\">Death</th>\r\n                                    <th scope=\"col\" className=\"d-none d-lg-table-cell\">Death %</th>\r\n                                    <th scope=\"col\" className=\"d-none d-lg-table-cell\">Recovery %</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {countries}\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n                {modal}\r\n            </Aux>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=(state)=>{\r\n    return {\r\n        countries:state.stats.countries,\r\n        loading:state.stats.loading\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n    return {\r\n        onFetchStats:()=>dispatch(fetchStatsInit())\r\n    }\r\n}\r\n\r\nexport default  connect(mapStateToProps,mapDispatchToProps)(CountryStats)\r\n","import * as actionTypes from \"./action_types\";\r\n\r\nexport const fetchStatsSuccess=(fetchedData)=>{\r\n    return{\r\n        type:actionTypes.FETCH_STATS_SUCCESS,\r\n        data:fetchedData\r\n    }\r\n}\r\n\r\nexport const fetchStatsFail=(error)=>{\r\n    return {\r\n        type:actionTypes.FETCH_STATS_FAIL,\r\n        error:error\r\n    }\r\n}\r\n\r\nexport const fetchStatsInit=()=>{\r\n    return async(dispatch)=>{\r\n        try{\r\n            dispatch({type:actionTypes.STATS_INIT});\r\n            const response=await fetch(\"https://corona-api.com/countries\");\r\n            const result=await response.json();\r\n            console.log(result)\r\n            dispatch(fetchStatsSuccess(result.data));\r\n        }catch(error){\r\n            dispatch(fetchStatsFail(error))\r\n        }\r\n        \r\n    }\r\n}","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst footer=props=>(\r\n    <footer className=\"page-footer font-small bg-dark text-white-50 pt-4\">\r\n  <div className=\"container-fluid text-center text-md-left\">\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6 mt-md-0 mt-3\">\r\n        <h5 className=\"text-uppercase\">DECLARATION</h5>\r\n        <p className=\"text-justify\">The counts has been taken as per the  website of https://corona-api.com/ and \r\n          is  updated time to time as the data is updated in the site.</p>\r\n      </div>\r\n      <hr className=\"clearfix w-100 d-md-none pb-3\"/>\r\n      <div className=\"col-md-3 mb-md-0 mb-3\">\r\n        <h5 className=\"text-uppercase\">Links</h5>\r\n        <ul className=\"list-unstyled\">\r\n          <li>\r\n            <NavLink to=\"/dashboard\" >Dashboard</NavLink >\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/stats\" >Country Stats</NavLink >\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"footer-copyright text-center py-3\">© 2020:\r\n    <a href=\"https://github.com/konarssuresh/Covid19World\"> Covid19World</a>\r\n  </div>\r\n</footer>\r\n)\r\n\r\n\r\nexport default footer;","import React from 'react';\nimport logo from './logo.svg';\nimport Navbar from \"./Components/Navbar/Navbar\";\nimport './App.css';\nimport Dashboard from './Containers/Dashboard/Dashboard';\nimport CountryStats from \"./Containers/CountryStats/CountryStats\"\nimport {Switch,Route,Redirect} from 'react-router-dom';\nimport Footer from \"./Components/Footer/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar/>\n      <Switch>\n        <Route path=\"/dashboard\" component={Dashboard}/>\n        <Route path=\"/stats\" component={CountryStats}/>\n        <Redirect from=\"/\" to=\"/dashboard\"/>\n        <Redirect to=\"/\"/>\n      </Switch>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/action_types'\r\n\r\nconst initialState={\r\n    updatedAt:null,\r\n    updatedDate:null,\r\n    deaths:null,\r\n    confirmed:null,\r\n    recovered:null,\r\n    new_confirmed:null,\r\n    new_recovered:null,\r\n    new_deaths:null,\r\n    loading:false\r\n}\r\n\r\nconst reducer=(state=initialState,action)=>{\r\n    switch(action.type){\r\n        case(actionTypes.DASHBOARD_INIT):\r\n            return{\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case(actionTypes.FETCH_DASHBOARD_FAIL):\r\n            return {\r\n                ...state,\r\n                loading:false\r\n            }\r\n\r\n        case(actionTypes.FETCH_DASHBOARD_SUCCESS):\r\n            return {\r\n                ...state,\r\n                updatedAt:action.data.updatedAt,\r\n                updatedDate:action.data.updatedDate,\r\n                deaths:action.data.deaths,\r\n                confirmed:action.data.confirmed,\r\n                recovered:action.data.recovered,\r\n                new_deaths:action.data.new_deaths,\r\n                new_confirmed:action.data.new_confirmed,\r\n                new_recovered:action.data.new_recovered,\r\n                loading:false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport default reducer;","import * as actionTypes from \"../actions/action_types\";\r\nconst initialState={\r\n    countries:null,\r\n    loading:false\r\n}\r\n\r\nconst reducer=(state=initialState,action)=>{\r\n    switch(action.type){\r\n        case actionTypes.STATS_INIT:\r\n            return {\r\n                ...state,\r\n                loading:true\r\n            }\r\n        case actionTypes.FETCH_STATS_SUCCESS:\r\n            return{\r\n                ...state,\r\n                countries:action.data,\r\n                loading:false\r\n            }\r\n        case actionTypes.FETCH_STATS_FAIL:\r\n            return{\r\n                ...state,\r\n                loading:false\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import 'bootstrap/dist/css/bootstrap.min.css';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {combineReducers,compose,createStore,applyMiddleware} from 'redux';\nimport {BrowserRouter} from 'react-router-dom';\n import DashboardReducer from \"./store/reducers/Dashboard\";\n import CountryStatsReducer from \"./store/reducers/CountryStats\";\nimport thunk from 'redux-thunk';\nimport fetchIntercept from 'fetch-intercept';\n\nconst unregister = fetchIntercept.register({\n  request: function (url, config) {\n      // Modify the url or config here\n      if(config && config.method===\"POST\"){\n          config.headers={'Content-Type':'application/json'}\n      }\n      return [url, config];\n  },\n\n  requestError: function (error) {\n      // Called when an error occured during another 'request' interceptor call\n      return Promise.reject(error);\n  },\n\n  response: function (response) {\n      // Modify the reponse object\n      console.log(response);\n      return response;\n  },\n\n  responseError: function (error) {\n      // Handle an fetch error\n      console.log(error);\n      return Promise.reject(error);\n  }\n});\n\nconst composeEnhancers = (window).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst reducer=combineReducers({\n  dboard:DashboardReducer,\n  stats:CountryStatsReducer\n})\nconst store=createStore(reducer,composeEnhancers(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename=\"Covid19World\">\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}